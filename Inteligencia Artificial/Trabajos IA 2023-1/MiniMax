{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1qfRVo6yV7n82YPJwyu1pcWqd7wzbXWeb","timestamp":1681481278765}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Inteligencia Artificial\n","Universidad del Cauca\n","Facultad de Ingeniería Electrónica y Telecomunicaciones\n","\n","\n","Russell S., Norvig P., Inteligencia Artificial: Un Enfoque Moderno, ‎ALHAMBRA, 2nd edición (1 Septiembre 2004),\\\\978-8420540030"],"metadata":{"id":"bPk-yQ5156eP"}},{"cell_type":"code","source":["import copy\n","import itertools\n","import random\n","from collections import namedtuple\n","import numpy as np"],"metadata":{"id":"HoXNtc01p-yb","executionInfo":{"status":"ok","timestamp":1681487871654,"user_tz":300,"elapsed":187,"user":{"displayName":"Steben David Higidio","userId":"10745936183401763547"}}},"execution_count":107,"outputs":[]},{"cell_type":"code","source":["class GameState():\n","  def __init__(self, board, utility=None, nivel=0):\n","    self.__board=board\n","    self.__utility=utility\n","    self.__nivel=nivel\n","\n","  @property\n","  def board(self):\n","    return self.__board\n","\n","  @board.setter\n","  def board(self, value):\n","    self.__board = value\n","  \n","  @property\n","  def utility(self):\n","    return self.__utility\n","\n","  @utility.setter\n","  def utility(self, value):\n","    self.__utility = value\n","  \n","  @property\n","  def nivel(self):\n","    return self.__nivel\n","\n","  @nivel.setter\n","  def nivel(self, value):\n","    self.__nivel = value"],"metadata":{"id":"Bn562howA0By","executionInfo":{"status":"ok","timestamp":1681487871655,"user_tz":300,"elapsed":17,"user":{"displayName":"Steben David Higidio","userId":"10745936183401763547"}}},"execution_count":108,"outputs":[]},{"cell_type":"code","source":["class Game(object):\n","    # Identificar cuales son los movimientos o jugadas posibles de un jugador\n","    def actions(self, state):\n","        raise NotImplementedError\n","\n","    # Ejecutar un movimiento o jugada y retornar el nuevo estado\n","    def result(self, state, move):\n","        raise NotImplementedError\n","\n","    # Calcular la función de utilidad\n","    def utility(self, state):\n","        raise NotImplementedError\n","\n","    # Condición de parada (profundidad, ganador )\n","    def terminal_test(self, state):\n","        return not self.actions(state)\n","        \n","    # Ejecutar el juego\n","    def play_game(self, *players):\n","       raise NotImplementedError\n"],"metadata":{"id":"flfIuX9EpVkH","executionInfo":{"status":"ok","timestamp":1681487871656,"user_tz":300,"elapsed":17,"user":{"displayName":"Steben David Higidio","userId":"10745936183401763547"}}},"execution_count":109,"outputs":[]},{"cell_type":"code","source":["list=['arriba','abajo','izquierda','derecha']\n","a=max(list, key=lambda a:len(a))\n","print(a)"],"metadata":{"id":"El8p3WwTmcNH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681487871657,"user_tz":300,"elapsed":18,"user":{"displayName":"Steben David Higidio","userId":"10745936183401763547"}},"outputId":"fa1a6c16-de47-42bd-a2d4-442fb42473ff"},"execution_count":110,"outputs":[{"output_type":"stream","name":"stdout","text":["izquierda\n"]}]},{"cell_type":"code","execution_count":111,"metadata":{"id":"3g_gxcoSpOqc","executionInfo":{"status":"ok","timestamp":1681487871658,"user_tz":300,"elapsed":18,"user":{"displayName":"Steben David Higidio","userId":"10745936183401763547"}}},"outputs":[],"source":["def minimax(state, game):\n","  \n","    def max_value(state):\n","      board=state.board\n","      if game.terminal_test(state):\n","        return game.utility(state)\n","      v = -np.inf\n","      for a in game.actions(state,1):\n","        v = max(v, min_value(game.result(state, a,1)))\n","      return v\n","\n","    def min_value(state):\n","      board=state.board\n","      if game.terminal_test(state):\n","        return game.utility(state)\n","      v = np.inf\n","      for a in game.actions(state,2):\n","        v = min(v, max_value(game.result(state, a,2)))\n","      return v\n","\n","    # Body of minmax_decision:\n","    return max(game.actions(state,1), key=lambda a: min_value(game.result(state, a,1)))"]},{"cell_type":"code","source":["import copy\n","import random as rnd\n","class TicTacToe():\n","  def __init__(self):\n","    self.table = [-1]*9\n","    self.nivel = 4\n","  \n","  def actions(self, state, player):\n","    board=state.board\n","    actions=[]\n","    for i, value in enumerate(board):\n","      if value==-1:\n","        actions.append(i)\n","        print(\"Actions:\",actions)\n","    return actions\n","\n","  def result(self, state, action, player):    \n","    board=state.board\n","    newboard=copy.deepcopy(board)\n","    newboard[action]=player\n","    n=state.nivel+1\n","    newstate=GameState(newboard, nivel=n)\n","    return newstate\n","  \n","  def utility(self, state):\n","    board=state.board\n","    return(self.checkCol(state,2)+self.checDiag(state,2)+self.checkRow(state,2))-(self.checkCol(state,1)+self.checkDiag(state,1)+self.checkRow(state,1))\n","     \n","  def terminal_test(self, state):\n","    if state.nivel==self.nivel or self.checkTicTacToe(state):\n","      return True\n","    else:\n","      return False\n","  \n","  def checkTicTacToe(self, state):\n","    board=state.board\n","    if self.checkTicTacToeRow(board):\n","      return True\n","    elif self.checkTicTacToeCol(board):\n","      return True\n","    elif self.checkTicTacToeDiag(board):\n","      return True\n","    else:\n","      return False\n","\n","\n","  def checkTicTacToeRow(self,board):\n","    for i in range(0,len(board),3):\n","      ctr=set(board[i:i+3])\n","      if len(ctr)==1 and (-1 in ctr):\n","        return True\n","    return False\n","\n","  def checkTicTacToeCol(self,board):\n","    for i in range(0,3,1):\n","      ctr=set(board[i::3])\n","      if (-1 in ctr) and (2 not in ctr):\n","        return True\n","    return False\n","  \n","  def checkTicTacDiag(self,board):\n","    ctr=set(board[::4])\n","    if len(ctr)==1 and (-1 in ctr):\n","      return True\n","    ctr=set(board[2:-1:2])\n","    if len(ctr)==1and (-1 in ctr):\n","      return True\n","    return False\n","\n","  def checkRow(self,board,oponent):\n","    for i in range(0,len(board),3):\n","      ctr=set(board[i:i+3])\n","      if (-1 in ctr) and (oponent not in ctr) :\n","        filas=filas+1\n","    return filas    \n","\n","  def checkCol(self,board,oponent):\n","     for i in range(0,3,1):\n","      ctr=set(board[i::3])\n","      if (-1 in ctr) and (oponent not in ctr):\n","        col=col+1\n","      return col  \n","  \n","  def checkDiag(self,board,oponent):\n","    ctr=set(board[::4])\n","    if (-1 in ctr) and (oponent not in ctr):\n","      diag=diag+1\n","    ctr=set(board[2:-1:2])\n","    if (oponent not in ctr):\n","      diag=diag+1\n","    return diag\n","\n","    def play_game(self, *players):\n","       raise NotImplementedError\n","\n","\n","\n","\n"],"metadata":{"id":"NVGZa6rDtue0","executionInfo":{"status":"ok","timestamp":1681487871661,"user_tz":300,"elapsed":20,"user":{"displayName":"Steben David Higidio","userId":"10745936183401763547"}}},"execution_count":112,"outputs":[]},{"cell_type":"code","source":["table = [-1]*9\n","print(table)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AFP-eX_RM9gn","executionInfo":{"status":"ok","timestamp":1681487871663,"user_tz":300,"elapsed":22,"user":{"displayName":"Steben David Higidio","userId":"10745936183401763547"}},"outputId":"497cf5e8-c633-4dcd-f76f-fc219fb9e89c"},"execution_count":113,"outputs":[{"output_type":"stream","name":"stdout","text":["[-1, -1, -1, -1, -1, -1, -1, -1, -1]\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"B7d32g9TzKBU"}},{"cell_type":"code","source":["tictactoe=TicTacToe()\n","state=GameState([2,-1,-1,-1,1,2,-1,-1,1])\n","comp=minimax(state, tictactoe)\n","print(comp)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"yG94y8gxy5SM","executionInfo":{"status":"error","timestamp":1681487871996,"user_tz":300,"elapsed":352,"user":{"displayName":"Steben David Higidio","userId":"10745936183401763547"}},"outputId":"01b4954c-0a0f-4af1-8a8d-e6839c879f17"},"execution_count":114,"outputs":[{"output_type":"stream","name":"stdout","text":["Actions: [1]\n","Actions: [1, 2]\n","Actions: [1, 2, 3]\n","Actions: [1, 2, 3, 6]\n","Actions: [1, 2, 3, 6, 7]\n"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-114-5504eed6241d>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtictactoe\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTicTacToe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mGameState\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mcomp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mminimax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtictactoe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcomp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-111-f69c2b12685d>\u001b[0m in \u001b[0;36mminimax\u001b[0;34m(state, game)\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0;31m# Body of minmax_decision:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mmin_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-111-f69c2b12685d>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(a)\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0;31m# Body of minmax_decision:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mmin_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-111-f69c2b12685d>\u001b[0m in \u001b[0;36mmin_value\u001b[0;34m(state)\u001b[0m\n\u001b[1;32m     13\u001b[0m       \u001b[0mboard\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mboard\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mterminal_test\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutility\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m       \u001b[0mv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m       \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-112-7ce32dee7f85>\u001b[0m in \u001b[0;36mutility\u001b[0;34m(self, state)\u001b[0m\n\u001b[1;32m     25\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mutility\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0mboard\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mboard\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheckCol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchecDiag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheckRow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheckCol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheckDiag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheckRow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mterminal_test\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-112-7ce32dee7f85>\u001b[0m in \u001b[0;36mcheckCol\u001b[0;34m(self, board, oponent)\u001b[0m\n\u001b[1;32m     77\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mcheckCol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mboard\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0moponent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m      \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 79\u001b[0;31m       \u001b[0mctr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboard\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     80\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mctr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0moponent\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mctr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m         \u001b[0mcol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'GameState' object is not subscriptable"]}]}]}